
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CivilState {
  Married
  Single
}
enum Severity {
  mild
  moderate
  severe
}

// Modelo de prueba
model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  slug     String    @unique
  title    String
  body     String
  author   String
  authorId String
  comments String[]
}

// Modelos de usuarios
model Permission {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  permissionName  String   @unique
  code            String   @unique
  active          Boolean
  rolIDs          String[]   @db.ObjectId
  roles           Rol[] @relation(fields: [rolIDs], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Rol {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  roleName    String      @unique
  description String
  active      Boolean
  persons     Person[]    @relation
  permissionIDs String[] @db.ObjectId
  permissions   Permission[]   @relation(fields: [permissionIDs], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Allergy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  substance   String
  reaction    String
  severity    Severity 
  notes       String?
  personId    String   @db.ObjectId
  person      Person   @relation(fields: [personId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@map("allergies")
}

model Person {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String     @default("Patient")
  active            Boolean
  firstName         String
  secondName        String?
  familyName        String
  gender            String
  birthDate         DateTime
  phone             String?
  mobile            String?
  email             String
  addressLine       String
  addressCity       String
  maritalStatus     CivilState
  identification    String     @unique
  username          String     @unique
  password          String
  lastLogin         DateTime?
  passwordExpiration DateTime
  photoUrl          String
  allergies         Allergy[]
  rolID             String      @db.ObjectId
  rol               Rol         @relation(fields: [rolID], references: [id])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  @@map("persons")
}

model Appointment {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  resourceType          String   @default("Appointment")
  status                String   @default("creada")
  cancellationReason    String?
  specialty             String
  reason                String
  description           String?
  start                 DateTime
  end                   DateTime
  cancellationDate      DateTime?
  note                  String?
  patientInstruction    String?
  practitionerId        String  @db.ObjectId
  previousAppointment   String?  @db.ObjectId
  originatingAppointment String? @db.ObjectId
  subject               String   @db.ObjectId
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  @@map("appointments")
}

model AuditEvent {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String   @default("AuditEvent")
  type              String
  action            String
  severity          String
  outcome           String?
  module            String
  detail            String
  requestor         Boolean
  occurredDateTime  DateTime  
  network           String
  personName        String
  personRole        String
  personId          String  @db.ObjectId
  createdAt         DateTime @default(now())
}