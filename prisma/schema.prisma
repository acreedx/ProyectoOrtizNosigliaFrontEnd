datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Person {
  id                        String            @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String            @default("Person")
  photoUrl                  String
  firstName                 String
  secondName                String?
  familyName                String
  gender                    String
  birthDate                 DateTime
  phone                     String
  mobile                    String
  email                     String
  addressLine               String
  addressCity               String
  maritalStatus             String
  identification            String            @unique
  username                  String            @unique
  password                  String
  passwordExpiration        DateTime
  passwordAttempts          Int               @default(0)
  lastLogin                 DateTime?
  status                    String            @default("nuevo")
  allergies                 Allergy[]
  contacts                  Contact[]
  qualifications            Qualification[]
  odontograma               OdontogramRows[]
  imagingStudies            ImagingStudy[]
  carePlans                 CarePlan[]
  auditEvents               AuditEvent[]       
  organizationId            String?           @db.ObjectId
  organization              Organization?     @relation(fields: [organizationId], references: [id])
  rolId                     String            @db.ObjectId
  rol                       Rol               @relation(fields: [rolId], references: [id])
  accountId                 String            @db.ObjectId
  account                   Account           @relation(fields: [accountId], references: [id])
  subject_appointments      Appointment[]     @relation("subject_appointment")
  practitioner_appointments Appointment[]     @relation("practitioner_appointment")
  subject_encounters        Encounter[]       @relation("subject_encounter")
  practitioner_encounters   Encounter[]       @relation("practitioner_encounter")
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  @@map("Persons")
}

model OdontogramRows {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String          @default("OdontogramRows")
  msc               String
  temp              String?
  piezas            String?
  fecha             DateTime?
  diagnostico       String?
  tratamiento       String?
  active            Boolean         @default(true)
  imagingStudyId    String?         @db.ObjectId
  imagingStudy      ImagingStudy?   @relation(fields: [imagingStudyId], references: [id])
  personId          String          @db.ObjectId
  person            Person          @relation(fields: [personId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  @@map("OdontogramRows")
}

model Allergy {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  resourceType  String    @default("Allergy")
  substance     String
  reaction      String
  severity      String 
  notes         String?
  active        Boolean   @default(true)
  personId      String    @db.ObjectId
  person        Person    @relation(fields: [personId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("Allergies")
}

model Contact {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String     @default("Organization")
  relationship      String
  name              String
  phone             String 
  mobile            String
  email             String
  addressLine       String
  addressCity       String
  gender            String
  active            Boolean
  personId          String     @db.ObjectId
  person            Person     @relation(fields: [personId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  @@map("Contacts")
}

model Organization {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String      @default("Organization")
  name              String
  address           String
  active            Boolean     @default(true)
  persons           Person[]    @relation
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  @@map("Organizations")
}

model Qualification {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String     @default("Qualification")
  start             DateTime
  end               DateTime  
  name              String
  issuer            String
  active            Boolean    @default(true)
  personId          String     @db.ObjectId
  persons           Person     @relation(fields: [personId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  @@map("Qualification")
}

model Rol {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String        @default("Rol")
  roleName          String        @unique
  description       String  
  active            Boolean       @default(true)
  persons           Person[]      @relation
  permissionIDs     String[]      @db.ObjectId
  permissions       Permission[]  @relation(fields: [permissionIDs], references: [id])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  @@map("Roles")
}

model Permission {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  resourceType    String    @default("Permission")
  code            String    @unique
  permissionName  String    @unique
  active          Boolean   @default(true)
  rolIDs          String[]  @db.ObjectId
  roles           Rol[]     @relation(fields: [rolIDs], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@map("Permissions")
}

model Appointment {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String      @default("Appointment")
  start                     DateTime
  end                       DateTime
  specialty                 String
  reason                    String
  note                      String?
  patientInstruction        String?
  cancellationDate          DateTime?
  cancellationReason        String?
  status                    String      @default("Pendiente")
  subjectId                 String      @db.ObjectId
  subject                   Person      @relation("subject_appointment",fields: [subjectId], references: [id])
  practitionerId            String      @db.ObjectId
  practitioner              Person      @relation("practitioner_appointment",fields: [practitionerId], references: [id])
  encounters                Encounter[] @relation()
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  @@map("Appointments")
}

model Encounter {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String      @default("Encounter")
  type                      String
  start                     DateTime
  end                       DateTime
  reason                    String
  diagnosis                 String 
  status                    String      @default("completado")
  subjectId                 String      @db.ObjectId
  subject                   Person      @relation("subject_encounter",fields: [subjectId], references: [id])
  practitionerId            String      @db.ObjectId
  practitioner              Person      @relation("practitioner_encounter",fields: [practitionerId], references: [id])
  appointmentId             String      @db.ObjectId
  appointment               Appointment @relation(fields: [appointmentId], references: [id])    
  accountIds                String[]    @db.ObjectId
  accounts                  Account[]   @relation(fields: [accountIds], references: [id])
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  @@map("Encounters")
}

model Account {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String      @default("Account")
  balance                   Float
  billingStatus             String
  calculatedAt              DateTime?
  encounterIds              String[]    @db.ObjectId
  encounters                Encounter[] @relation(fields: [encounterIds], references: [id])
  carePlanIds               String[]    @db.ObjectId
  carePlans                 CarePlan[]  @relation(fields: [carePlanIds], references: [id])
  persons                   Person[]    @relation
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  @@map("Accounts")
}

model CarePlan {
  id                        String          @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String          @default("CarePlan")
  treatmentType             String   
  title                     String  
  description               String
  startDate                 DateTime
  endDate                   DateTime?
  estimatedAppointments     Int
  daysBetweenAppointments   Int
  totalAppointments         Int?
  costEstimation            Float
  status                    String          @default("Pendiente")
  appointmentIds            String[]        @db.ObjectId
  subjectId                 String          @db.ObjectId
  subject                   Person          @relation(fields: [subjectId], references: [id])
  imagingStudies            ImagingStudy[]
  practitionerId            String          @db.ObjectId
  accountIds                String[]        @db.ObjectId
  accounts                  Account[]       @relation(fields: [accountIds], references: [id])
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  @@map("CarePlans")
}

model Treatments {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String      @default("Treatment")
  treatmentType             String
  title                     String
  description               String
  estimatedAppointments     Int
  daysBetweenAppointments   Int
  costEstimation            Float
  active                    Boolean 
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  @@map("Treatments")
}

model ImagingStudy {
  id                        String            @id @default(auto()) @map("_id") @db.ObjectId
  resourceType              String            @default("ImagingStudy")
  description               String
  active                    Boolean
  media                     String[]     
  odontograms               OdontogramRows[]  
  personId                  String            @db.ObjectId
  person                    Person            @relation(fields: [personId], references: [id])
  carePlanId                String?           @db.ObjectId
  carePlans                 CarePlan?         @relation(fields: [carePlanId], references: [id])
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime          @updatedAt
  @@map("ImagingStudies")
}

model AuditEvent {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  resourceType      String    @default("AuditEvent")
  type              String
  action            String
  severity          String
  outcome           String?
  module            String
  detail            String
  requestor         Boolean
  occurredDateTime  DateTime  
  network           String
  personName        String
  personRole        String
  personId          String    @db.ObjectId
  person            Person    @relation(fields: [personId], references: [id])
  createdAt         DateTime  @default(now())
  @@map("AuditEvents")
}
